package com.aesirsoftwares;

import org.apache.hc.client5.http.fluent.Request;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;

import java.util.ArrayList;
import java.util.List;

public class VulnerabilityScanner {
    private static final String ZAP_API_BASE_URL = "http://localhost:8080";
    private static final String ZAP_ALERTS_URL = ZAP_API_BASE_URL + "/JSON/core/view/alerts/";
    private static final String ZAP_SCAN_URL = ZAP_API_BASE_URL + "/JSON/ascan/action/scan/";
    private static final String ZAP_SCAN_STATUS_URL = ZAP_API_BASE_URL + "/JSON/ascan/view/status/";
    private static final String API_KEY = "sua-api-key-aqui"; // Substitua pela API key do OWASP ZAP.

    public static void main(String[] args) {
        String target = "http://exemplo.com"; // Substitua pelo URL do alvo.

        try {
            // Iniciar o scan ativo
            System.out.println("Iniciando varredura ativa no OWASP ZAP...");
            List<String> scannedUrls = scanWithOWASPZAP(target);

            // Recuperar as vulnerabilidades após o scan
            String response = fetchVulnerabilities();
            parseAndDisplayVulnerabilities(response);

            // Exibir as URLs escaneadas (se necessário)
            System.out.println("URLs escaneadas:");
            for (String url : scannedUrls) {
                System.out.println(url);
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static List<String> scanWithOWASPZAP(String target) throws Exception {
        List<String> scannedUrls = new ArrayList<>();

        try {
            // URL para iniciar o scan ativo
            String scanURL = ZAP_SCAN_URL + "?apikey=" + API_KEY + "&url=" + target;

            // Iniciar o scan
            String response = Request.get(scanURL)
                    .execute()
                    .returnContent()
                    .asString();

            JSONObject scanResponse = new JSONObject(response);
            if (scanResponse.has("code") && scanResponse.getInt("code") != 200) {
                throw new Exception("Erro ao iniciar o scan: " + scanResponse.optString("message", "Desconhecido"));
            }

            // Monitorar o status do scan
            String statusURL = ZAP_SCAN_STATUS_URL + "?apikey=" + API_KEY;
            while (true) {
                String statusResponse = Request.get(statusURL)
                        .execute()
                        .returnContent()
                        .asString();

                JSONObject statusJson = new JSONObject(statusResponse);
                int status = Integer.parseInt(statusJson.getString("status"));

                System.out.println("Progresso do scan: " + status + "%");
                if (status >= 100) {
                    System.out.println("Scan concluído.");
                    break;
                }

                Thread.sleep(2000); // Esperar 2 segundos antes de verificar novamente
            }

            // Adicionar a URL escaneada à lista
            scannedUrls.add(target);
        } catch (Exception e) {
            System.err.println("Erro durante o scan: " + e.getMessage());
            throw e;
        }

        return scannedUrls; // Certificar que a lista sempre será retornada
    }

    public static String fetchVulnerabilities() throws Exception {
        return Request.get(ZAP_ALERTS_URL + "?apikey=" + API_KEY)
                .execute()
                .returnContent()
                .asString();
    }

    public static void parseAndDisplayVulnerabilities(String jsonResponse) {
        try {
            JSONObject jsonObject = new JSONObject(jsonResponse);
            JSONArray alerts = jsonObject.getJSONArray("alerts");

            if (alerts.length() == 0) {
                System.out.println("No vulnerabilities found.");
                return;
            }

            for (int i = 0; i < alerts.length(); i++) {
                JSONObject alert = alerts.getJSONObject(i);
                String name = alert.optString("alert", "Unknown");
                String risk = alert.optString("risk", "Unknown");
                String description = alert.optString("description", "No description available.");
                String url = alert.optString("url", "No URL provided.");

                System.out.println("Vulnerability Found:");
                System.out.println("Name: " + name);
                System.out.println("Risk: " + risk);
                System.out.println("Description: " + description);
                System.out.println("URL: " + url);
                System.out.println("-------------------------------------");
            }
        } catch (JSONException e) {
            System.err.println("Error parsing JSON response: " + e.getMessage());
        }
    }
}