package com.aesirsoftwares;

import org.apache.hc.client5.http.fluent.Request;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;
import java.util.ArrayList;
import java.util.List;

public class VulnerabilityScanner {
    private static final String ZAP_ALERTS_URL = "http://localhost:8081/JSON/core/view/alerts/";

    public static void main(String[] args) {
        try {
            String response = fetchVulnerabilities();
            System.out.println("Full Response from ZAP:");
            System.out.println(response);  // Logando o JSON completo para depuração
            parseAndDisplayVulnerabilities(response);
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static String fetchVulnerabilities() throws Exception {
        return Request.get(ZAP_ALERTS_URL)  // Corrigido para .get()
                .execute()
                .returnContent()
                .asString();
    }

    public static List<String> scanWithOWASPZAP(String inputUrl) throws Exception {
        String jsonResponse = fetchVulnerabilities();
        System.out.println("Full Response from ZAP (scanWithOWASPZAP method):");
        System.out.println(jsonResponse);  // Logando a resposta completa para depuração

        JSONObject jsonObject = new JSONObject(jsonResponse);
        JSONArray alerts = jsonObject.getJSONArray("alerts");
        
        List<String> vulnerabilities = new ArrayList<>();
        
        if (alerts.length() == 0) {
            vulnerabilities.add("No vulnerabilities found.");
            return vulnerabilities;
        }

        for (int i = 0; i < alerts.length(); i++) {
            JSONObject alert = alerts.getJSONObject(i);
            String name = alert.optString("alert", "Unknown");
            String risk = alert.optString("risk", "Unknown");
            String description = alert.optString("description", "No description available.");
            String url = alert.optString("url", "No URL provided.");
            
            vulnerabilities.add("Vulnerability Found:");
            vulnerabilities.add("Name: " + name);
            vulnerabilities.add("Risk: " + risk);
            vulnerabilities.add("Description: " + description);
            vulnerabilities.add("URL: " + url);
            vulnerabilities.add("-------------------------------------");
        }

        return vulnerabilities;
    }

    public static void parseAndDisplayVulnerabilities(String jsonResponse) {
        try {
            JSONObject jsonObject = new JSONObject(jsonResponse);
            JSONArray alerts = jsonObject.getJSONArray("alerts");

            // Logando o JSON para ver se está chegando corretamente
            System.out.println("Parsing JSON Response:");
            System.out.println(jsonResponse);

            if (alerts.length() == 0) {
                System.out.println("No vulnerabilities found.");
                return;
            }

            for (int i = 0; i < alerts.length(); i++) {
                JSONObject alert = alerts.getJSONObject(i);
                String name = alert.optString("alert", "Unknown");
                String risk = alert.optString("risk", "Unknown");
                String description = alert.optString("description", "No description available.");
                String url = alert.optString("url", "No URL provided.");

                System.out.println("Vulnerability Found:");
                System.out.println("Name: " + name);
                System.out.println("Risk: " + risk);
                System.out.println("Description: " + description);
                System.out.println("URL: " + url);
                System.out.println("-------------------------------------");
            }
        } catch (JSONException e) {
            System.err.println("Error parsing JSON response: " + e.getMessage());
        }
    }
}